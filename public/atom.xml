<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Andre Brutus]]></title>
  <link href="http://abrut.us/atom.xml" rel="self"/>
  <link href="http://abrut.us/"/>
  <updated>2013-09-25T17:19:58-07:00</updated>
  <id>http://abrut.us/</id>
  <author>
    <name><![CDATA[Andre Brutus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[env: python2: No such file or directory]]></title>
    <link href="http://abrut.us/blog/2013/09/25/env-python2-no-such-file-or-directory/"/>
    <updated>2013-09-25T16:29:00-07:00</updated>
    <id>http://abrut.us/blog/2013/09/25/env-python2-no-such-file-or-directory</id>
    <content type="html"><![CDATA[<p>Tried out asciinema and encountered the <code>env: python2: No such file or directory</code> error. Asciinema must be attempting to use python from the wrong symlink. To create it,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo ln -s /usr/bin/python /usr/bin/python2</span></code></pre></td></tr></table></div></figure>


<p>(assuming /usr/bin/python is python 2.x). If you dont know where python and it is not located in /usr/bin/python, run <code>which python</code>. To find out which python you have, run <code>python --version</code>. Combining both commands, you could run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo ln -s `which python` /usr/bin/python2</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to reset stats-rrdb]]></title>
    <link href="http://abrut.us/blog/2013/09/25/how-to-reset-stats-rrdb/"/>
    <updated>2013-09-25T10:38:00-07:00</updated>
    <id>http://abrut.us/blog/2013/09/25/how-to-reset-stats-rrdb</id>
    <content type="html"><![CDATA[<p>For some odd reason, I was unable to start the stats-rrdb daemon (it said that it started but it would die immediately afterwards).</p>

<p>After tailing the logs, I found this slightly cryptic error message.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Server status update thread exception: Unexpected rrdb metric block pos 648 pos_ts: 1379698992 (expected from tuple: 1379697192)</span></code></pre></td></tr></table></div></figure>


<p>I attempted changing some configs to no avail, so the last resource was to reset the metrics. Given that this was on my VM and no important metrics were being recorded for me, I resorted to clearing all the data (<strong>don&#8217;t do this in your production environment, unless you don&#8217;t care about losing all your data</strong>).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo rm -rf /var/stats-rrdb/*</span></code></pre></td></tr></table></div></figure>


<p>After clearing all the data, I was able to restart the stats-rrdb. Best of luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[301 Redirects with Octopress on Heroku]]></title>
    <link href="http://abrut.us/blog/2012/11/20/301-redirects-with-octopress-on-heroku/"/>
    <updated>2012-11-20T00:40:00-08:00</updated>
    <id>http://abrut.us/blog/2012/11/20/301-redirects-with-octopress-on-heroku</id>
    <content type="html"><![CDATA[<p>I decided to move over my personal blog entries outside this blog. Following good migration procedure, I set up <a href="http://support.google.com/webmasters/bin/answer.py?hl=en&amp;answer=93633">301 Redirects</a>. At first, my dumb self cranked up vim and created a .htaccess, then I remembered that this blog runs on Heroku, which is probably not using Apache (for obvious scalability reasons). After a quick <code>heroku ps</code>, I can see that the &#8216;thin&#8217; application is serving my blog. <code>thin --version</code> reveals that I am running <a href="http://code.macournoyer.com/thin/">thin 1.2.6 codename Crazy Delicious</a>.</p>

<p>Needless to say, htaccess wont work, so I must resort to using <a href="https://github.com/jtrupiano/rack-rewrite">rack-rewrite</a>[<sup>1].</sup></p>

<p>I add the gem at the end of my Gemfile:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;rack-rewrite&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I add my rewrite rules to config.ru (after the $root line)</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Rewrite</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">r301</span> <span class="sr">%r{^/blog/2012/10/25/bliss-that-is-out-of-reach/?$}</span><span class="p">,</span> <span class="s1">&#39;http://blog.andrebrutus.com/2012/10/25/bliss-that-is-out-of-reach/&#39;</span>
</span><span class='line'>  <span class="n">r301</span> <span class="sr">%r{^/blog/2012/10/28/job-sins-from-the-youth/?$}</span><span class="p">,</span> <span class="s1">&#39;http://blog.andrebrutus.com/2012/10/28/job-sins-from-the-youth/&#39;</span>
</span><span class='line'>  <span class="n">r301</span> <span class="sr">%r{^/blog/2012/11/03/chronicles-of-a-bittersweet-travel-experience/?$}</span><span class="p">,</span> <span class="s1">&#39;http://blog.andrebrutus.com/2012/11/03/chronicles-of-a-bittersweet-travel-experience/&#39;</span>
</span><span class='line'>  <span class="n">r301</span> <span class="sr">%r{^/blog/2012/10/24/quote-from-job-2/?$}</span><span class="p">,</span> <span class="s1">&#39;http://blog.andrebrutus.com/2012/10/04/quote-from-job-2/&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then download the rake-rewrite gem by executing <code>bundle</code>.</p>

<p>Finally, update your blog by <code>rake generate</code> and publish away! You can see the changes to both the Gemfile and confi.ru on my <a href="https://github.com/abrutus/abrut.us/commit/570fbe904a673d5fee0e5ab41ec3208f1c7a46f7#diff-0" target="_blank">github commit</a></p>

<p>Footnotes:</p>

<p>[<sup>1]</sup> While definitely more verbose, <a href="http://adamwiggall.com/blog/2012/01/05/redirects-octopress-and-heroku" target="_blank">this article</a> helped me find the solution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cURL PUT request with P12 (PKCS #12) certificate using PHP]]></title>
    <link href="http://abrut.us/blog/2012/11/19/curl-put-request-with-p12-pkcs-number-12-certificate-using-php/"/>
    <updated>2012-11-19T11:07:00-08:00</updated>
    <id>http://abrut.us/blog/2012/11/19/curl-put-request-with-p12-pkcs-number-12-certificate-using-php</id>
    <content type="html"><![CDATA[<p>While working with some archaic API I was asked to upload files via HTTP using a P12 certificate. At first, phased and confused, I thought to myself: file uploads usually happen through a POST request using a form
that has an enctype of multipart/form-data, or different protocols like (S)FTP, WebDav, etc. Remembering some academia on the HTTP protocol, I resorted to the PUT request, and it actually worked. So to save someone
some time:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$content</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="s2">&quot;/path/to/file_you_want_to_upload.pdf&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$stream_length</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$content</span><span class="p">);</span>
</span><span class='line'><span class="nv">$fp</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="s2">&quot;php://memory&quot;</span><span class="p">,</span> <span class="s2">&quot;rw&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">fputs</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="nv">$content</span><span class="p">);</span>
</span><span class='line'><span class="nb">rewind</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span>
</span><span class='line'><span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$url</span><span class="o">=</span><span class="s2">&quot;http://some.url/file_you_want_to_upload.pdf&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_SSLCERT</span><span class="p">,</span> <span class="s2">&quot;/path/to/certfile.p12&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_SSLCERTTYPE</span><span class="p">,</span> <span class="s2">&quot;P12&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_SSLKEYPASSWD</span><span class="p">,</span> <span class="s2">&quot;CertFilePassword&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// And if the HTTP endpoint requries HTTP Auth</span>
</span><span class='line'><span class="c1">//curl_setopt($ch, CURLOPT_USERPWD, $cfg[&#39;HTTP_AUTH_USER&#39;]. &quot;:&quot; . $cfg[&#39;HTTP_AUTH_PASS&#39;]);</span>
</span><span class='line'><span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_PUT</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_INFILE</span><span class="p">,</span> <span class="nv">$put_file_handle</span><span class="p">);</span>
</span><span class='line'><span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_INFILESIZE</span><span class="p">,</span> <span class="nv">$stream_length</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$result</span> <span class="o">===</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;Curl Error on PUT file: &quot;</span><span class="o">.</span> <span class="nb">curl_error</span><span class="p">(</span><span class="nv">$ch</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">curl_close</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>
</span><span class='line'><span class="nb">fclose</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This snippet opens a file, counts the bytes, opens a file stream (in memory) and passes that information into the CURLOPT_INFILE and CURLOPT_INFILESIZE parameters of the cURL API. This snippet throws, so you should use a try-catch.</p>

<p>An obvious improvement would be to use <code>filesize()</code> instead ouf <code>count()</code>,
 but my script generates files on the fly, so instead of resorting to slow I/O, I do things in memory. You could change <code>$content = "my file contents";</code> and see its dynamic nature. If you will use it only for file system files, I do recommend using filesize().</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spell Check using VIM]]></title>
    <link href="http://abrut.us/blog/2012/11/11/spell-check-vim/"/>
    <updated>2012-11-11T00:02:00-08:00</updated>
    <id>http://abrut.us/blog/2012/11/11/spell-check-vim</id>
    <content type="html"><![CDATA[<p>It should be no secret to anyone that my main editor for programming (and
writing blog posts) is VIM. Given that I have allowed personal posts to
occasionally feature on my blog, I have written some lengthy blog posts. Long posts usually
mean lots of spelling mistakes, and there are some commands that have helped me on the way.</p>

<p>To enable spell check (will highlight misspelled words)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:set spell</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s a sample output:</p>

<p><img src="http://cl.ly/image/3q1u1F0B0Y3T/Screen%20Shot%202012-11-11%20at%2012.19.11%20AM.png" alt="Sample of VIM's spellcheck'" /></p>

<p>To advance to the next misspelled word</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>]s</span></code></pre></td></tr></table></div></figure>


<p>or to go to the previous word</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[s</span></code></pre></td></tr></table></div></figure>


<p>To show spelling suggestions for currently selected misspelled word:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>z=</span></code></pre></td></tr></table></div></figure>


<p><img src="http://cl.ly/image/2o1Z2G3O0138/Screen%20Shot%202012-11-11%20at%2012.21.05%20AM.png" alt="Spelling Suggestions in VIM" width="50%" /></p>

<p>And to add a word to VIM&#8217;s dictionary:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zg</span></code></pre></td></tr></table></div></figure>


<p>And of course, to turn off spellcheck:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:set nospell</span></code></pre></td></tr></table></div></figure>


<p>Also, if you don&#8217;t know it by now, this Blog runs on Octopress and is published via git. If you find a post that needs &#8216;refactoring&#8217;, feel free to <a href="https://github.com/abrutus/abrut.us/tree/master/source/_posts">fork</a> the repository and do a pull request. Gotta love open source!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a virtualenv for use with Django 1.4 and (possibly) Heroku]]></title>
    <link href="http://abrut.us/blog/2012/10/28/creating-a-virtualenv-for-use-with-django-1-dot-4-and-possibly-heroku/"/>
    <updated>2012-10-28T05:25:00-07:00</updated>
    <id>http://abrut.us/blog/2012/10/28/creating-a-virtualenv-for-use-with-django-1-dot-4-and-possibly-heroku</id>
    <content type="html"><![CDATA[<p>Say you want to start a project and you want to use Heroku for your quick &#8216;proof of concept&#8217;.
You will need virtual environment.</p>

<p>On my Mac 10.8.2, I did:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo easy_install virtualenv
</span><span class='line'>sudo easy_install pip</span></code></pre></td></tr></table></div></figure>


<p>Then to create the virtual environment called venv (while on my project folder):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virtualenv --distribute venv</span></code></pre></td></tr></table></div></figure>


<p>Then to activate the virutal environment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source venv/bin/activate</span></code></pre></td></tr></table></div></figure>


<p>
By now, my propmt&#8217;s prefix would be appended with (venv) and I am inside my virtual environment. I can now proceed to install Django, by executing</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip install Django</span></code></pre></td></tr></table></div></figure>


<p>After installing Django, I can freeze the requirements so Heroku would know which packages to install whenever I do a push by executing</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip freeze &gt; requirements.txt</span></code></pre></td></tr></table></div></figure>


<p>
and adding the output file(requirements.txt) to the repository.</p>

<p>By using a virtualenv, you can have different projects use different python installations(2.x and 3.x) in a single development machine, and also replicate your exact production environment. Heroku uses the requirements file to install the specific versions of the modules which in turn makes everything a replica of your development environment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming every day]]></title>
    <link href="http://abrut.us/blog/2012/08/22/coding-every-day/"/>
    <updated>2012-08-22T10:02:00-07:00</updated>
    <id>http://abrut.us/blog/2012/08/22/coding-every-day</id>
    <content type="html"><![CDATA[<p>Today I begin my challenge to write code daily(outside of the code I write for work). The main problem with this decision is that I often don&#8217;t believe the code that I write just-for-fun to be &#8220;publish worthy&#8221;.</p>

<p>However, this way, the big brother effect will kick in and allow me improve my daily coding while (hopefully) helping out someone out there. As a result, you will see my newly renamed github (from anebg to abrutus) grow on a daily basis, and this blog will contain short snippets and explanations. Because this is such a big commitment, I command you as a reader and programmer to do the same, and I will link to your blog(yes, you are my new accountability partner).</p>

<p>So my plan is to pick up a book on a langugage I know next to nothing about (scala/clojure) and mark-down notes here for everyone&#8217;s reference.</p>

<p>Wish me luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The broken windows theory and Software Engineering]]></title>
    <link href="http://abrut.us/blog/2012/06/22/broken-windows-theory-and-software-engineering/"/>
    <updated>2012-06-22T01:56:00-07:00</updated>
    <id>http://abrut.us/blog/2012/06/22/broken-windows-theory-and-software-engineering</id>
    <content type="html"><![CDATA[<p>Recently, I stumbled upon an interesting email. It was in Spanish(<a href="http://www.anundis.com/profiles/blogs/un-mundo-sin-las-ventanas-rotas">found it</a>) so be merciful with me as I attempt to translate and paraphrase:</p>

<blockquote><p>1969, Stanford: Professor Philip Zimbardo conducted an experiment in social psychology. He left two identical cars(same make,model, color) in two different neighborhoods(Bronx-NY, and Palo Alto-CA). Two identical cars in two neighborhoods with very different populations, along with a team of specialists in social psychology to study the behavior of people at each site.</p>

<p>It turned out that the car in the Bronx began to be vandalized within hours: lost the tires, engine, mirrors, radio. All that was usable was taken away, and what wasn&#8217;t usable was destroyed. The car in Palo alto remained intact.</p>

<p>Commonly, people attribute poverty to cause crime, but the experiment wasn&#8217;t over. With the Palo Alto car unscratched and the Bronx car destroyed, the researchers decided to break a window in the Palo Alto Car. The result was that this action unleashed the same process as in the Bronx: theft, violence and vandalism reduced the vehicle to the same state as in the poor neighborhood.</p>

<p>Why was the broken car window in a supposedly safe neighborhood able to unleash such a criminal reaction?</p></blockquote>

<!-- more -->


<blockquote><p>It isn&#8217;t poverty, it&#8217;s obviously something to do with psychology, human behavior and social relations</p>

<p>A broken window in an abandoned car conveys an idea of deterioration, lack of interest, carelessness that breaks codes of coexistence, and it resembles the absence of law, norm or rules. Every new attack suffered by the auto reaffirms and multiplies the idea, until the escalation of events, getting worse, becomes uncontrollable, leading to irrational violence.</p>

<p>In later experiments (James Q. Wilson and George Kelling) developed the &#8216;broken windows theory&#8217;, from a criminology point of view concluding that crime is higher in areas where neglect, dirt, disorder and abuse are higher.</p></blockquote>

<p>This article got my mind running. What If the same principle is applied to Software Engineering?</p>

<p>Suddenly my mind wandered off to that function I left undocumented, that class that  needed refactoring. I&#8217;m not a perfect programmer. Will the future programmers(or some newbs) vandalize my code? Will I be ashamed to look at my creation?</p>

<p>Probably. Also, you don&#8217;t need a &#8220;society&#8221; of programmers to make this theory a reality. Just you and your future you, looking back at beta version of your own self in code. You will see the broken windows, but will you fix those broken windows? Or, will they influence you to carelessness?</p>

<p>Some hope (from the <a href="http://en.wikipedia.org/wiki/Broken_windows_theory">Wiki</a> article):</p>

<blockquote><p>George L. Kelling [the author of the theory], was hired as a consultant to the New York City Transit Authority in 1985, and measures to test the broken windows theory were implemented by David Gunn. The presence of graffiti was intensively targeted, and the subway system was cleaned from 1984 until 1990.</p>

<p>According to the 2001 study of crime trends in New York by George Kelling and William Sousa,[3] rates of both petty and serious crime fell suddenly and significantly, and continued to drop for the following ten years.</p></blockquote>

<p>And apparently similar success occurred in Albuquerque, Massachusetts(20% drop in calls to the police) and even the Netherlands.</p>

<p>Feel free to drop me a line in the comment section below.</p>

<p>UPDATE: From the comments (below and reddit), it seems that this topic was covered previously by the Pragmatic Programmer and I recommend you <a href="http://pragprog.com/the-pragmatic-programmer/extracts/software-entropy">read it here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On blogging engineering]]></title>
    <link href="http://abrut.us/blog/2012/06/19/ninjas-cutting-onions/"/>
    <updated>2012-06-19T08:26:00-07:00</updated>
    <id>http://abrut.us/blog/2012/06/19/ninjas-cutting-onions</id>
    <content type="html"><![CDATA[<p>You&#8217;ve landed. Here I blog mostly about issues that arise out of the technology I employ(Django, CodeIgniter, jQuery, Bootstrap) and the ones I&#8217;m learning (Scala and Ruby). Ocassionally, you&#8217;ll hear me describe architectures.
Drop me a line in the comments, twitter or github. I&#8217;ll be around <strong>(I promise)</strong></p>

<p>And here is a hello world for syntax highlighting:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Operator for Overloading</span>
</span><span class='line'><span class="k">object</span> <span class="nc">operator</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">operation</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">a</span><span class="o">+</span><span class="n">b</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
