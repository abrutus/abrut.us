<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Coding | Andre Brutus]]></title>
  <link href="http://abrut.us/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://abrut.us/"/>
  <updated>2012-11-11T00:45:24-08:00</updated>
  <id>http://abrut.us/</id>
  <author>
    <name><![CDATA[Andre Brutus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spell Check using VIM]]></title>
    <link href="http://abrut.us/blog/2012/11/11/spell-check-vim/"/>
    <updated>2012-11-11T00:02:00-08:00</updated>
    <id>http://abrut.us/blog/2012/11/11/spell-check-vim</id>
    <content type="html"><![CDATA[<p>It should be no secret to anyone that my main editor for programming (and
writing blog posts) is VIM. Given that I have allowed personal posts to
occasionally feature on my blog, I have written some lengthy blog posts. Long posts usually
mean lots of spelling mistakes, and there are some commands that have helped me on the way.</p>

<p>To enable spell check (will highlight misspelled words)
<code>
:set spell
</code>
Here's a sample output:</p>

<p><img src="http://cl.ly/image/3q1u1F0B0Y3T/Screen%20Shot%202012-11-11%20at%2012.19.11%20AM.png" alt="Sample of VIM's spellcheck'" /></p>

<p>To advance to the next misspelled word
<code>
]s
</code>
or to go to the previous word
<code>
[s
</code></p>

<p>To show spelling suggestions for currently selected misspelled word:
<code>
z=
</code>
<img src="http://cl.ly/image/2o1Z2G3O0138/Screen%20Shot%202012-11-11%20at%2012.21.05%20AM.png" alt="Spelling Suggestions in VIM" width="50%" /></p>

<p>And to add a word to VIM's dictionary:
<code>
zg
</code></p>

<p>And of course, to turn off spellcheck:
<code>
:set nospell
</code></p>

<p>Also, if you don't know it by now, this Blog runs on Octopress and is published via git. If you find a post that needs 'refactoring', feel free to <a href="https://github.com/abrutus/abrut.us/tree/master/source/_posts">fork</a> the repository and do a pull request. Gotta love open source!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a virtualenv for use with Django 1.4 and (possibly) Heroku]]></title>
    <link href="http://abrut.us/blog/2012/10/28/creating-a-virtualenv-for-use-with-django-1-dot-4-and-possibly-heroku/"/>
    <updated>2012-10-28T05:25:00-07:00</updated>
    <id>http://abrut.us/blog/2012/10/28/creating-a-virtualenv-for-use-with-django-1-dot-4-and-possibly-heroku</id>
    <content type="html"><![CDATA[<p>Say you want to start a project and you want to use Heroku for your quick 'proof of concept'.
You will need virtual environment.</p>

<p>On my Mac 10.8.2, I did:</p>

<p><code>
sudo easy_install virtualenv
sudo easy_install pip
</code>
Then to create the virtual environment called venv (while on my project folder):
<code>
virtualenv --distribute venv
</code>
Then to activate the virutal environment:
<code>
source venv/bin/activate
</code>
By now, my propmt's prefix would be appended with (venv) and I am inside my virtual environment. I can now proceed to install Django, by executing
<code>
pip install Django
</code>
After installing Django, I can freeze the requirements so Heroku would know which packages to install whenever I do a push by executing</p>

<p><code>
pip freeze &gt; requirements.txt
</code>
and adding the output file(requirements.txt) to the repository.</p>

<p>By using a virtualenv, you can have different projects use different python installations(2.x and 3.x) in a single development machine, and also replicate your exact production environment. Heroku uses the requirements file to install the specific versions of the modules which in turn makes everything a replica of your development environment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On blogging engineering]]></title>
    <link href="http://abrut.us/blog/2012/06/19/ninjas-cutting-onions/"/>
    <updated>2012-06-19T08:26:00-07:00</updated>
    <id>http://abrut.us/blog/2012/06/19/ninjas-cutting-onions</id>
    <content type="html"><![CDATA[<p>You've landed. Here I blog mostly about issues that arise out of the technology I employ(Django, CodeIgniter, jQuery, Bootstrap) and the ones I'm learning (Scala and Ruby). Ocassionally, you'll hear me describe architectures.
Drop me a line in the comments, twitter or github. I'll be around <strong>(I promise)</strong></p>

<p>And here is a hello world for syntax highlighting:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Operator for Overloading</span>
</span><span class='line'><span class="k">object</span> <span class="nc">operator</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">operation</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">a</span><span class="o">+</span><span class="n">b</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
