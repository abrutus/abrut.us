<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Coding | Andre Brutus]]></title>
  <link href="http://abrut.us/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://abrut.us/"/>
  <updated>2012-11-20T11:09:36-08:00</updated>
  <id>http://abrut.us/</id>
  <author>
    <name><![CDATA[Andre Brutus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[301 Redirects with Octopress on Heroku]]></title>
    <link href="http://abrut.us/blog/2012/11/20/301-redirects-with-octopress-on-heroku/"/>
    <updated>2012-11-20T00:40:00-08:00</updated>
    <id>http://abrut.us/blog/2012/11/20/301-redirects-with-octopress-on-heroku</id>
    <content type="html"><![CDATA[<p>I decided to move over my personal blog entries outside this blog. Following good migration procedure, I set up <a href="http://support.google.com/webmasters/bin/answer.py?hl=en&amp;answer=93633">301 Redirects</a>. At first, my dumb self cranked up vim and created a .htaccess, then I remembered that this blog runs on Heroku, which is probably not using Apache (for obvious scalability reasons). After a quick <code>heroku ps</code>, I can see that the 'thin' application is serving my blog. <code>thin --version</code> reveals that I am running <a href="http://code.macournoyer.com/thin/">thin 1.2.6 codename Crazy Delicious</a>.</p>

<p>Needless to say, htaccess wont work, so I must resort to using <a href="https://github.com/jtrupiano/rack-rewrite">rack-rewrite</a>[<sup>1].</sup></p>

<p>I add the gem at the end of my Gemfile:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;rack-rewrite&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then I add my rewrite rules to config.ru (after the $root line)
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Rewrite</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;r301 %r{^/</span><span class="n">blog</span><span class="o">/</span><span class="mi">2012</span><span class="o">/</span><span class="mi">10</span><span class="o">/</span><span class="mi">25</span><span class="o">/</span><span class="n">bliss</span><span class="o">-</span><span class="n">that</span><span class="o">-</span><span class="n">is</span><span class="o">-</span><span class="n">out</span><span class="o">-</span><span class="n">of</span><span class="o">-</span><span class="n">reach</span><span class="o">/</span><span class="sc">?$</span><span class="p">},</span> <span class="s1">&#39;http://blog.andrebrutus.com/2012/10/25/bliss-that-is-out-of-reach/&#39;</span>
</span><span class='line'><span class="n">r301</span> <span class="sr">%r{^/blog/2012/10/28/job-sins-from-the-youth/?$}</span><span class="p">,</span> <span class="s1">&#39;http://blog.andrebrutus.com/2012/10/28/job-sins-from-the-youth/&#39;</span>
</span><span class='line'><span class="n">r301</span> <span class="sr">%r{^/blog/2012/11/03/chronicles-of-a-bittersweet-travel-experience/?$}</span><span class="p">,</span> <span class="s1">&#39;http://blog.andrebrutus.com/2012/11/03/chronicles-of-a-bittersweet-travel-experience/&#39;</span>
</span><span class='line'><span class="n">r301</span> <span class="sr">%r{^/blog/2012/10/24/quote-from-job-2/?$}</span><span class="p">,</span> <span class="s1">&#39;http://blog.andrebrutus.com/2012/10/04/quote-from-job-2/&#39;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then download the rake-rewrite gem by executing <code>bundle</code>.</p>

<p>Finally, update your blog by <code>rake generate</code> and publish away! You can see the changes to both the Gemfile and confi.ru on my <a href="https://github.com/abrutus/abrut.us/commit/570fbe904a673d5fee0e5ab41ec3208f1c7a46f7#diff-0" target="_blank">github commit</a></p>

<p>Footnotes:</p>

<p>[<sup>1]</sup> While definitely more verbose, <a href="http://adamwiggall.com/blog/2012/01/05/redirects-octopress-and-heroku" target="_blank">this article</a> helped me find the solution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cURL PUT request with P12 (PKCS #12) certificate using PHP]]></title>
    <link href="http://abrut.us/blog/2012/11/19/curl-put-request-with-p12-pkcs-number-12-certificate-using-php/"/>
    <updated>2012-11-19T11:07:00-08:00</updated>
    <id>http://abrut.us/blog/2012/11/19/curl-put-request-with-p12-pkcs-number-12-certificate-using-php</id>
    <content type="html"><![CDATA[<p>While working with some archaic API I was asked to upload files via HTTP using a P12 certificate. At first, phased and confused, I thought to myself: file uploads usually happen through a POST request using a form
that has an enctype of multipart/form-data, or different protocols like (S)FTP, WebDav, etc. Remembering some academia on the HTTP protocol, I resorted to the PUT request, and it actually worked. So to save someone
some time:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">$content = file_get_contents(&quot;/path/to/file_you_want_to_upload.pdf&quot;);</span>
</span><span class='line'><span class="x">$stream_length = count($content);</span>
</span><span class='line'><span class="x">$fp = fopen(&quot;php://memory&quot;, &quot;rw&quot;);</span>
</span><span class='line'><span class="x">fputs($fp, $content);</span>
</span><span class='line'><span class="x">rewind($fp);</span>
</span><span class='line'><span class="x">curl_setopt($ch, CURLOPT_URL, $url=&quot;http://some.url/file_you_want_to_upload.pdf&quot;);</span>
</span><span class='line'><span class="x">curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);</span>
</span><span class='line'><span class="x">curl_setopt($ch, CURLOPT_SSLCERT, &quot;/path/to/certfile.p12&quot;);</span>
</span><span class='line'><span class="x">curl_setopt($ch, CURLOPT_SSLCERTTYPE, &quot;P12&quot;);</span>
</span><span class='line'><span class="x">curl_setopt($ch, CURLOPT_SSLKEYPASSWD, &quot;CertFilePassword&quot;);</span>
</span><span class='line'><span class="x">// And if the HTTP endpoint requries HTTP Auth</span>
</span><span class='line'><span class="x">//curl_setopt($ch, CURLOPT_USERPWD, $cfg[&#39;HTTP_AUTH_USER&#39;]. &quot;:&quot; . $cfg[&#39;HTTP_AUTH_PASS&#39;]);</span>
</span><span class='line'><span class="x">curl_setopt($ch, CURLOPT_PUT, 1);</span>
</span><span class='line'><span class="x">curl_setopt($ch, CURLOPT_INFILE, $put_file_handle);</span>
</span><span class='line'><span class="x">curl_setopt($ch, CURLOPT_INFILESIZE, $stream_length);</span>
</span><span class='line'><span class="x">$result = curl_exec($ch);</span>
</span><span class='line'><span class="x">if($result === false) {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;throw new Exception(&quot;Curl Error on PUT file: &quot;. curl_error($ch));</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span><span class='line'><span class="x">curl_close($ch);</span>
</span><span class='line'><span class="x">fclose($ch);</span>
</span><span class='line'><span class="x">?&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This snippet opens a file, counts the bytes, opens a file stream (in memory) and passes that information into the CURLOPT_INFILE and CURLOPT_INFILESIZE parameters of the cURL API. This snippet throws, so you should use a try-catch.</p>

<p>An obvious improvement would be to use <code>filesize()</code> instead ouf <code>count()</code>,
 but my script generates files on the fly, so instead of resorting to slow I/O, I do things in memory. You could change <code>$content = "my file contents";</code> and see its dynamic nature. If you will use it only for file system files, I do recommend using filesize().</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spell Check using VIM]]></title>
    <link href="http://abrut.us/blog/2012/11/11/spell-check-vim/"/>
    <updated>2012-11-11T00:02:00-08:00</updated>
    <id>http://abrut.us/blog/2012/11/11/spell-check-vim</id>
    <content type="html"><![CDATA[<p>It should be no secret to anyone that my main editor for programming (and
writing blog posts) is VIM. Given that I have allowed personal posts to
occasionally feature on my blog, I have written some lengthy blog posts. Long posts usually
mean lots of spelling mistakes, and there are some commands that have helped me on the way.</p>

<p>To enable spell check (will highlight misspelled words)
<code>
:set spell
</code>
Here's a sample output:</p>

<p><img src="http://cl.ly/image/3q1u1F0B0Y3T/Screen%20Shot%202012-11-11%20at%2012.19.11%20AM.png" alt="Sample of VIM's spellcheck'" /></p>

<p>To advance to the next misspelled word
<code>
]s
</code>
or to go to the previous word
<code>
[s
</code></p>

<p>To show spelling suggestions for currently selected misspelled word:
<code>
z=
</code>
<img src="http://cl.ly/image/2o1Z2G3O0138/Screen%20Shot%202012-11-11%20at%2012.21.05%20AM.png" alt="Spelling Suggestions in VIM" width="50%" /></p>

<p>And to add a word to VIM's dictionary:
<code>
zg
</code></p>

<p>And of course, to turn off spellcheck:
<code>
:set nospell
</code></p>

<p>Also, if you don't know it by now, this Blog runs on Octopress and is published via git. If you find a post that needs 'refactoring', feel free to <a href="https://github.com/abrutus/abrut.us/tree/master/source/_posts">fork</a> the repository and do a pull request. Gotta love open source!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a virtualenv for use with Django 1.4 and (possibly) Heroku]]></title>
    <link href="http://abrut.us/blog/2012/10/28/creating-a-virtualenv-for-use-with-django-1-dot-4-and-possibly-heroku/"/>
    <updated>2012-10-28T05:25:00-07:00</updated>
    <id>http://abrut.us/blog/2012/10/28/creating-a-virtualenv-for-use-with-django-1-dot-4-and-possibly-heroku</id>
    <content type="html"><![CDATA[<p>Say you want to start a project and you want to use Heroku for your quick 'proof of concept'.
You will need virtual environment.</p>

<p>On my Mac 10.8.2, I did:</p>

<p><code>
sudo easy_install virtualenv
sudo easy_install pip
</code>
Then to create the virtual environment called venv (while on my project folder):
<code>
virtualenv --distribute venv
</code>
Then to activate the virutal environment:
<code>
source venv/bin/activate
</code>
By now, my propmt's prefix would be appended with (venv) and I am inside my virtual environment. I can now proceed to install Django, by executing
<code>
pip install Django
</code>
After installing Django, I can freeze the requirements so Heroku would know which packages to install whenever I do a push by executing</p>

<p><code>
pip freeze &gt; requirements.txt
</code>
and adding the output file(requirements.txt) to the repository.</p>

<p>By using a virtualenv, you can have different projects use different python installations(2.x and 3.x) in a single development machine, and also replicate your exact production environment. Heroku uses the requirements file to install the specific versions of the modules which in turn makes everything a replica of your development environment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On blogging engineering]]></title>
    <link href="http://abrut.us/blog/2012/06/19/ninjas-cutting-onions/"/>
    <updated>2012-06-19T08:26:00-07:00</updated>
    <id>http://abrut.us/blog/2012/06/19/ninjas-cutting-onions</id>
    <content type="html"><![CDATA[<p>You've landed. Here I blog mostly about issues that arise out of the technology I employ(Django, CodeIgniter, jQuery, Bootstrap) and the ones I'm learning (Scala and Ruby). Ocassionally, you'll hear me describe architectures.
Drop me a line in the comments, twitter or github. I'll be around <strong>(I promise)</strong></p>

<p>And here is a hello world for syntax highlighting:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Operator for Overloading</span>
</span><span class='line'><span class="k">object</span> <span class="nc">operator</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">operation</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">a</span><span class="o">+</span><span class="n">b</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
