<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Andre Brutus]]></title>
  <link href="http://abrut.us/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://abrut.us/"/>
  <updated>2014-04-28T00:46:49-07:00</updated>
  <id>http://abrut.us/</id>
  <author>
    <name><![CDATA[Andre Brutus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rabin-Karp example in Java]]></title>
    <link href="http://abrut.us/blog/2014/04/28/rabin-karp-example-in-java/"/>
    <updated>2014-04-28T00:11:00-07:00</updated>
    <id>http://abrut.us/blog/2014/04/28/rabin-karp-example-in-java</id>
    <content type="html"><![CDATA[<p>The <a href="http://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm">Rabin-Karp algorithm</a> is a string searching algorithm that has an average running time of <code>O(n+m)</code> instead of the <code>O(nm)</code> that is done when naively looping the small string on every character of the big string. If average of <code>O(n+m)</code> is not cutting it, investigate <a href="http://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm#The_Galil_Rule">Boyer-Moore with the inclusion of the Galil rule</a>, or <a href="http://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm">Knuth-Morris-Pratt</a> which  able to offer <code>O(n+m)</code> worst case. Rabin-Karp is the algorithm of choice for multiple pattern search.</p>

<p>``` java Rabin-Karp
class RabinKarp {</p>

<pre><code>// Hashes that simply take the int value of a character
public static int hash(char a) {
    return (int) a;
}
public static int hash(String a) {
    int hash = 0;
    for(char ch : a.toCharArray()) {
        hash += (int)ch;
    }
    return hash;
}

static public int strpos(String big, String small) {
    if(small.length() &gt; big.length()) return -1;
    int desiredHash = hash(small);
    int actualHash = -1;
    char [] bigArr = big.toCharArray();
    for(int i=0; i&lt;big.length(); i++) {
        if(i + small.length()  &gt; big.length()) break;
        // Calculate hash once O(m)
        if(actualHash == -1) {
            actualHash = hash(big.substring(i, i+small.length()));
        }
        // Rolling hash, constant time on consecutive hashes
        else {
            actualHash -= hash(bigArr[i-1]);
            actualHash += hash(bigArr[i+small.length()-1]);
        }
        if(actualHash == desiredHash) {
            // Could have collided
            if(big.substring(i, i+small.length()).equals(small))
                return i;
        }
    }
    return -1;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
